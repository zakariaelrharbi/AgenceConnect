generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  LAND
  COMMERCIAL
}

enum ProductStatus {
  AVAILABLE
  RESERVED
  SOLD
  RENTED
  OFF_MARKET
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   Order[]
  products Product[]

  @@map("users")
}

model Product {
  id           String        @id @default(uuid())
  title        String
  description  String
  price        Float
  area         Float
  bedrooms     Int
  bathrooms    Int
  propertyType PropertyType
  location     String
  city         String
  neighborhood String
  latitude     Float?
  longitude    Float?
  amenities    String[]
  status       ProductStatus @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  agent      User           @relation(fields: [agentId], references: [id])
  agentId    String
  images     ProductImage[]
  orderItems OrderItem[] // Added opposite relation for OrderItem

  @@index([city])
  @@index([neighborhood])
  @@index([price])
  @@index([status])
  @@map("products")
}

model ProductImage {
  id           String  @id @default(uuid())
  url          String
  thumbnailUrl String
  isPrimary    Boolean @default(false)

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_images")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Float       @default(0.0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
  @@map("order_items")
}
